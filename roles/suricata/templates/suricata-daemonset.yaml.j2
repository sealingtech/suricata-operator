apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ suricata.fullname }}
  namespace: default
  labels:
    app: suricata
spec:
  selector:
    matchLabels:
      app: suricata
  template:
    metadata:
      name: {{ suricata.name }} 
      labels:
        app: suricata
    spec:
      {% if networks.use_host_networking -%}
      hostNetwork: true
      {% endif -%}
      initContainers:
      - name: verifynode
        image: {{ images.runner }}
        env:
        - name: INTERFACE1
          valueFrom:
            secretKeyRef:
              {% if suricata_config.inline == true %}
              name: inline-interface1
              {% else -%}
              name: passive-interface
              {% endif %}key: interface
        {%- if suricata_config.inline == true %}
        
        - name: INTERFACE2
          valueFrom:
            secretKeyRef:
              name: inline-interface2
              key: interface
        {%- endif %}

        - name: STARTUP_SCRIPT
          value: |
            #!/bin/bash
            set -e
            sleep 10
            if [ ! -f /sys/class/net/$INTERFACE/operstate ]; then
            echo "Network interface '$INTERFACE' not found, exiting..."
            exit 1
            fi
            while [ ! -f /var/lib/suricata/rules/suricata.rules ];do 
              echo 'Waiting for Suricata Update to Complete';
              sleep 5; 
            done
            until curl -sSf http://localhost:6379; do 
              sleep 2; 
            done
      containers:
      - name: suricata
        image: {{ images.suricata }}
        command: [ "bash", "-c", "while [ ! -f /var/lib/suricata/rules/suricata.rules ];do echo 'Waiting for Suricata Update to Complete'; sleep 5; done && until curl -sSf http://localhost:6379; do sleep 2; done && rm -rf /etc/suricata/* && cp -rpf -L /tmp/suricata/* /etc/suricata/ && /suricata-entrypoint.sh" ]
        stdin: true
        tty: true
        securityContext:
          privileged: true
          capabilities:
              add:
                - NET_ADMIN
                - SYS_NICE #Needed for CPU pinning
                - NET_RAW
        env: 
          - name: INTERFACE1
            valueFrom: 
              secretKeyRef: 
                {% if suricata_config.inline == true -%}
                name: inline-interface1
                {% else -%}
                name: passive-interface
                {% endif %}key: interface
          {% if suricata_config.inline -%}
          - name: INTERFACE2
            valueFrom: 
              secretKeyRef:
                name: inline-interface2
                key: interface
          {%- endif %}

        volumeMounts:
          - mountPath:  /tmp/suricata
            name: suricata-config
          - mountPath: /data/suricata
            name: suricata-logs
          - mountPath: /var/lib/suricata/rules
            name: suricata-rules-pvc
        resources:
          requests:
            cpu: "{{ suricata_config.requests.cpu }}"
            memory: "{{ suricata_config.requests.memory }}"
          limits:
            cpu: "{{ suricata_config.limits.cpu }}"
            memory: "{{ suricata_config.limits.memory }}"
      - name: redis
        image: {{ images.redis }}
        imagePullPolicy: Always
        ports:
        - name: cport-6379
          containerPort: 6379
        resources:
          requests:
            cpu: "{{ redis_config.requests.cpu }}"
            memory: "{{ redis_config.requests.memory }}"
          limits:
            cpu: "{{ redis_config.limits.cpu }}"
            memory: "{{ redis_config.limits.memory }}"

      {% if deployment_options.deployment == "standalone" -%}
      - name: logstash
        image: {{ images.logstash }}
        imagePullPolicy: Always
        ports:
        - name: cport-5044
          containerPort: 5044
        resources:
          requests:
            cpu: "{{ logstash_config.requests.cpu }}"
            memory: "{{ logstash_config.requests.memory }}"
          limits:
            cpu: "{{ logstash_config.limits.cpu }}"
            memory: "{{ logstash_config.limits.memory }}"
        volumeMounts:
          - mountPath: /usr/share/logstash/pipeline/
            name: logstash-suricata-pipeline
          - mountPath: /usr/share/logstash/config
            name: logstash-suricata-config
      {%- endif %}

      volumes:
      - name: suricata-logs
        emptyDir: {}
      - name: suricata-config
        configMap:
          name: {{ suricata.fullname }}-config
      - name: suricata-rules-pvc
        persistentVolumeClaim:
          claimName: {{ suricata.fullname }}-rules-pvc
      {% if deployment_options.deployment == "standalone" -%}
      - name: logstash-suricata-config
        configMap:
          name: logstash-{{ suricata.fullname  }}-config
      - name: logstash-suricata-pipeline
        configMap:
          name: logstash-{{ suricata.fullname }}-pipeline
     {%- endif %}

      restartPolicy: Always
      {% if networks.use_host_networking -%}
      dnsPolicy: ClusterFirstWithHostNet
      {% else -%}
      dnsPolicy: ClusterFirst
      {% endif %}

      nodeSelector:
        {{ node_selector.label }} : "true"
